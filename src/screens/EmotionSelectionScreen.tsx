import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  SafeAreaView,
  StyleSheet,
  Platform,
  ScrollView,
} from 'react-native';

interface Props {
  navigation: {
    navigate: (screen: string, params?: any) => void;
    goBack: () => void;
  };
}

interface Mood {
  emoji: string;
  name: string;
  description: string;
}

interface Interest {
  emoji: string;
  name: string;
  category: string;
}

const EmotionSelectionScreen: React.FC<Props> = ({ navigation }) => {
  const [selectedMood, setSelectedMood] = useState<string>('');
  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);

  const moods: Mood[] = [
    { emoji: 'üòä', name: 'ÌñâÎ≥µÌï¥Ïöî', description: 'Í∏∞Î∂ÑÏù¥ Ï¢ãÍ≥† Ï¶êÍ±∞Ïö¥ ÌïòÎ£®' },
    { emoji: 'üòî', name: 'Ïö∞Ïö∏Ìï¥Ïöî', description: 'Ï°∞Í∏à Ïä¨ÌîÑÍ≥† Ïö∞Ïö∏Ìïú Í∏∞Î∂Ñ' },
    { emoji: 'üò¥', name: 'ÌîºÍ≥§Ìï¥Ïöî', description: 'ÌïòÎ£® Ï¢ÖÏùº ÏßÄÏ≥êÏÑú ÌûòÎì§Ïñ¥Ïöî' },
    { emoji: 'ü§î', name: 'ÏÉùÍ∞Å ÎßéÏïÑÏöî', description: 'Ïó¨Îü¨ Í∞ÄÏßÄ Í≥†ÎØºÏù¥ ÎßéÏùÄ ÎÇ†' },
    { emoji: 'üòé', name: 'Ïó¨Ïú†Î°úÏõåÏöî', description: 'Ï∞®Î∂ÑÌïòÍ≥† ÌèâÏò®Ìïú ÎßàÏùå' },
  ];

  const interests: Interest[] = [
    { emoji: 'üéµ', name: 'ÏùåÏïÖ', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üé¨', name: 'ÏòÅÌôî', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üéÆ', name: 'Í≤åÏûÑ', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üìö', name: 'ÎèÖÏÑú', category: 'Ï∑®ÎØ∏' },
    { emoji: '‚úàÔ∏è', name: 'Ïó¨Ìñâ', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üç≥', name: 'ÏöîÎ¶¨', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üèÉ', name: 'Ïö¥Îèô', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üé®', name: 'Í∑∏Î¶º', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üì∑', name: 'ÏÇ¨ÏßÑ', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üíª', name: 'ÏΩîÎî©', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üå±', name: 'ÏãùÎ¨º', category: 'Ï∑®ÎØ∏' },
    { emoji: 'üêï', name: 'Î∞òÎ†§ÎèôÎ¨º', category: 'Ï∑®ÎØ∏' },
  ];

  const toggleInterest = (interestName: string) => {
    if (selectedInterests.includes(interestName)) {
      setSelectedInterests(prev => prev.filter(interest => interest !== interestName));
    } else if (selectedInterests.length < 3) {
      setSelectedInterests(prev => [...prev, interestName]);
    }
  };

  const handleComplete = () => {
    // ÏÑ†ÌÉùÎêú Í∞êÏ†ïÍ≥º Í¥ÄÏã¨ÏÇ¨Î•º Ï†ÄÏû•ÌïòÍ≥† ÎåÄÌôîÎ∞© Î™©Î°ùÏúºÎ°ú Ïù¥Îèô
    console.log('ÏÑ†ÌÉùÎêú Í∏∞Î∂Ñ:', selectedMood);
    console.log('ÏÑ†ÌÉùÎêú Í¥ÄÏã¨ÏÇ¨:', selectedInterests);
    
    // TODO: AsyncStorageÏóê Ï†ÄÏû•
    navigation.navigate('ChatRoomList');
  };

  const canComplete = selectedMood && selectedInterests.length > 0;

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.safeArea}>
        {/* Ìó§Îçî */}
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonText}>‚Äπ</Text>
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Ïò§ÎäòÏùò Í∏∞Î∂Ñ</Text>
          <View style={styles.placeholder} />
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {/* Í∏∞Î∂Ñ ÏÑ†ÌÉù */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>ÏßÄÍ∏à Í∏∞Î∂ÑÏù¥ Ïñ¥Îñ†ÏÑ∏Ïöî?</Text>
            <Text style={styles.sectionSubtitle}>ÌïòÎÇòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</Text>
            
            <View style={styles.moodGrid}>
              {moods.map((mood) => (
                <TouchableOpacity
                  key={mood.name}
                  style={[
                    styles.moodItem,
                    selectedMood === mood.name && styles.moodItemSelected
                  ]}
                  onPress={() => setSelectedMood(mood.name)}
                >
                  <Text style={styles.moodEmoji}>{mood.emoji}</Text>
                  <Text style={styles.moodName}>{mood.name}</Text>
                  <Text style={styles.moodDescription}>{mood.description}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {/* Í¥ÄÏã¨ÏÇ¨ ÏÑ†ÌÉù */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Í¥ÄÏã¨ÏÇ¨Î•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî</Text>
            <Text style={styles.sectionSubtitle}>
              ÏµúÎåÄ 3Í∞úÍπåÏßÄ ÏÑ†ÌÉù Í∞ÄÎä• ({selectedInterests.length}/3)
            </Text>
            
            <View style={styles.interestGrid}>
              {interests.map((interest) => (
                <TouchableOpacity
                  key={interest.name}
                  style={[
                    styles.interestItem,
                    selectedInterests.includes(interest.name) && styles.interestItemSelected,
                    selectedInterests.length >= 3 && !selectedInterests.includes(interest.name) && styles.interestItemDisabled
                  ]}
                  onPress={() => toggleInterest(interest.name)}
                  disabled={selectedInterests.length >= 3 && !selectedInterests.includes(interest.name)}
                >
                  <Text style={styles.interestEmoji}>{interest.emoji}</Text>
                  <Text style={styles.interestName}>{interest.name}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {/* ÏÑ†ÌÉù Í≤∞Í≥º ÎØ∏Î¶¨Î≥¥Í∏∞ */}
          {(selectedMood || selectedInterests.length > 0) && (
            <View style={styles.previewSection}>
              <Text style={styles.previewTitle}>ÏÑ†ÌÉùÌïú ÎÇ¥Ïö©</Text>
              
              {selectedMood && (
                <View style={styles.previewItem}>
                  <Text style={styles.previewLabel}>Ïò§Îäò Í∏∞Î∂Ñ:</Text>
                  <Text style={styles.previewValue}>
                    {moods.find(m => m.name === selectedMood)?.emoji} {selectedMood}
                  </Text>
                </View>
              )}
              
              {selectedInterests.length > 0 && (
                <View style={styles.previewItem}>
                  <Text style={styles.previewLabel}>Í¥ÄÏã¨ÏÇ¨:</Text>
                  <Text style={styles.previewValue}>
                    {selectedInterests.map(interest => {
                      const found = interests.find(i => i.name === interest);
                      return `${found?.emoji} ${interest}`;
                    }).join(', ')}
                  </Text>
                </View>
              )}
            </View>
          )}
        </ScrollView>

        {/* ÏôÑÎ£å Î≤ÑÌäº */}
        <View style={styles.bottomContainer}>
          <TouchableOpacity
            style={[
              styles.completeButton,
              canComplete ? styles.completeButtonActive : styles.completeButtonInactive
            ]}
            onPress={handleComplete}
            disabled={!canComplete}
          >
            <Text style={styles.completeButtonText}>
              {canComplete ? 'Îß§Ïπ≠ ÏãúÏûëÌïòÍ∏∞ ‚ú®' : 'Í∏∞Î∂ÑÍ≥º Í¥ÄÏã¨ÏÇ¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî'}
            </Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#030712',
  },
  safeArea: {
    flex: 1,
    paddingTop: Platform.OS === 'android' ? 25 : 0,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#111827',
    borderBottomWidth: 1,
    borderBottomColor: '#374151',
  },
  backButton: {
    width: 32,
    height: 32,
    justifyContent: 'center',
    alignItems: 'center',
  },
  backButtonText: {
    fontSize: 24,
    color: '#ffffff',
    fontWeight: '300',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#ffffff',
  },
  placeholder: {
    width: 32,
  },
  content: {
    flex: 1,
    paddingHorizontal: 16,
  },
  section: {
    marginVertical: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#ffffff',
    marginBottom: 8,
    textAlign: 'center',
  },
  sectionSubtitle: {
    fontSize: 14,
    color: '#9ca3af',
    textAlign: 'center',
    marginBottom: 24,
  },
  moodGrid: {
    gap: 12,
  },
  moodItem: {
    backgroundColor: '#1f2937',
    borderRadius: 12,
    padding: 16,
    borderWidth: 2,
    borderColor: 'transparent',
    alignItems: 'center',
  },
  moodItemSelected: {
    borderColor: '#3b82f6',
    backgroundColor: '#1e3a8a',
  },
  moodEmoji: {
    fontSize: 32,
    marginBottom: 8,
  },
  moodName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#ffffff',
    marginBottom: 4,
  },
  moodDescription: {
    fontSize: 12,
    color: '#9ca3af',
    textAlign: 'center',
  },
  interestGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  interestItem: {
    backgroundColor: '#1f2937',
    borderRadius: 8,
    padding: 12,
    borderWidth: 2,
    borderColor: 'transparent',
    alignItems: 'center',
    width: '30%',
    minWidth: 100,
  },
  interestItemSelected: {
    borderColor: '#10b981',
    backgroundColor: '#064e3b',
  },
  interestItemDisabled: {
    opacity: 0.5,
  },
  interestEmoji: {
    fontSize: 24,
    marginBottom: 4,
  },
  interestName: {
    fontSize: 12,
    color: '#ffffff',
    textAlign: 'center',
  },
  previewSection: {
    backgroundColor: '#111827',
    borderRadius: 12,
    padding: 16,
    marginVertical: 24,
    borderWidth: 1,
    borderColor: '#374151',
  },
  previewTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#ffffff',
    marginBottom: 12,
    textAlign: 'center',
  },
  previewItem: {
    marginBottom: 8,
  },
  previewLabel: {
    fontSize: 14,
    color: '#9ca3af',
    marginBottom: 4,
  },
  previewValue: {
    fontSize: 14,
    color: '#ffffff',
    fontWeight: '500',
  },
  bottomContainer: {
    paddingHorizontal: 16,
    paddingVertical: 24,
  },
  completeButton: {
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  completeButtonActive: {
    backgroundColor: '#3b82f6',
  },
  completeButtonInactive: {
    backgroundColor: '#6b7280',
  },
  completeButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default EmotionSelectionScreen;
